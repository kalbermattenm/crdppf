[buildout]
extends = crdppf_core/versions.cfg
index = http://pypi.camptocamp.net/pypi/

find-links = http://sitn.ne.ch/web/diffusion/mapfish/eggs

develop-eggs-directory = buildout/develop-eggs
eggs-directory = buildout/eggs
parts-directory = buildout/parts
bin-directory = buildout/bin

show-picked-versions = true

versions = versions
 
parts =
    pyramid
    fix-perm
    modwsgi
    template
    jsbuild

develop = .
        crdppf_core

newest = false
prefer-final = true

[vars]
# PROJECT
instanceid = overwrite_me
egg = crdppfportal
project = crdppf_core/crdppf
# Host of the application
host = overwrite_me
yaml_dbconfig_file = config_db.yaml

# default language (currently Fr or De)
default_language = Fr

# DATABASE
# database user
dbuser = overwrite_me
# database password
dbpassword = overwrite_me
# database host
dbhost = overwrite_me
# database port
dbport = overwrite_me
# database name
db = overwrite_me

# MAPSERVER
mapserv_allow = overwrite_me
mapserverexec = overwrite_me
# CRDPPF webapp definitions
crdppf_wms = http://localhost/${vars:instanceid}/wmscrdppf

# FEDERAL WEBSERVICES
ch_wms = http://wms.geo.admin.ch/
# Federal feature service base url
chfs_baseurl = https://api3.geo.admin.ch/rest/services/api/MapServer/identify

# FULLTEXTSEARCH - Define a fulltextsearchURL
fulltextsearch_url = overwrite_me

# BACKGROUND LAYERS - Define a mapproxyurl and other OpenLayers parameters for map.js and layertree.js
mapproxyurl = overwrite_me
mapExtent = overwrite_me
mapMaxExtent = overwrite_me
mapCenter = overwrite_me
mapSRS = overwrite_me
mapResolutions = overwrite_me
mapMatrixSet = overwrite_me
mapOverviewExtent = overwrite_me
mapOverviewSizeW = overwrite_me
mapOverviewSizeH = overwrite_me
keymap = overwrite_me

# MAPSERVER map extent
mapExtentMinX = overwrite_me
mapExtentMinY = overwrite_me
mapExtentMaxX = overwrite_me
mapExtentMaxY = overwrite_me

# Logon -> Should the system write to the log (pserve console or Apache error.log file)
logon = False

# Waitress port
waitress_port = overwrite_me

[pyramid]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    pyramid
    ${vars:egg}
interpreter = py

[modwsgi]
recipe = collective.recipe.modwsgi
eggs = ${vars:egg}
config-file = ${buildout:directory}/production.ini

[template]
recipe = z3c.recipe.filetemplate
source-directory = .
exclude-directories = buildout
extends = vars

[jsbuild]
recipe = JSTools:buildjs
resource-dir = ${buildout:directory}/crdppf_core/jsbuild
# the following jsbuild config files must be written on
# one line, otherwise Paste will throw a syntax error
config = ${jsbuild:resource-dir}/app.cfg
output-dir = ${vars:project}/static/build
compress = True

[fix-perm]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> if sys.platform.startswith('linux'):
    >>>    from subprocess import call, Popen, PIPE
    >>>    call(['chmod', '--quiet', '-R', 'o+w', 'crdppfportal/crdppf/static/public/pdf'])
    >>>    call(['chmod', '--quiet', '-R', 'o+w', 'crdppfportal/crdppf/static/public/temp_files'])
    >>>    dirs = Popen(['find', '-type', 'd'], stdout=PIPE).communicate()[0]
    >>>    for d in [d for d in dirs.split('\n') if len(d) > 0]:
    >>>        call(['chmod', '--quiet', 'g+s', d])
    >>>    call(['chmod', '--quiet', '-R', 'g+rw,o+r', '.'])
    >>>    # remove wsgi file (rights issue)
    >>>    call(['rm', '-f', 'buildout/parts/modwsgi/wsgi'])
